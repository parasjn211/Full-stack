JavaScript Notes after the Notebook is over:-

started from:
Date:- 20/09/2024
Day:- Friday



Data types of javascript


1.String

String is a group of characters
In js we can create string by 3 ways
a. by single quote : '_'
b. by double qotes "_"
c. by backticks `_`
 The advantage of the backticks ` is that we can create string interpolation
Example:
s1='Hello'
let fname = "abc"
s2="Hello ${fname}"
s3=`Hello ${fname}`

*)Accessing string element:

We can access string element by indexing 
JavaScript support positive indexing and negative indexing

1   2  3  4  5
-   -  -  -  - 
|            |
-   -  -  -  -
-5 -4 -3 -2 -1

We can access string by two ways:
1. by subscript that is '[]' 
2.and by 'at()' function

Subscript and at function are same, but using at() function we can access element by negative indexing. We cannot use negative indexing with subscript.

Example: 

let s1=`Hello`
//length of string
let n=
s1.length
console.log(n)
//accessing string elements by index
console.log(s1[0])
console.log(s1[2])
console.log(s1[3])
console.log(s1[-1]) //it will print undefined as negative indexing is not supported in subscript
console.log("***************************************************")

//accessing string element by at() function

console.log(s1[0])
console.log(s1[2])
console.log(s1[3])
console.log(s1[-1])


string objects are immutable that is which cannot be changed.

*)String methods
1.toLpperCase(): converts string to uppercase and 
2.toLowerCase(): converts
3.indexOf(): it is used to find the index of substring. if multiple substring are there, then it will return index of the first substring
4.lastIndexOf(): gets the index of last substring

Example:
let s1= `Hello World`
console.log(s1)
s1=s1.toUpperCase()
console.log(s1)
s1=s1.toLowerCase()
console.log(s1)
/********************************************/
let s1=`Hello World`
x=s1.indexOf(`l`)
console.log(`x)
x=s1.indexOf(`l`)
console.log(`x)
x=s1.indexOf(`xyz`)
console.log(`x)
x=s1.indexOf(`Wo`)
console.log(`x)
/*******************************************/
let s1=`Helol World`
let x=-1
do{
	x=s1.indexOf(`1`, x+1)
	console.log(x)
  }wile(x!=-1);

5.split() function: It is used to divide string object into substring. We can split the string by given separater character
Example: 
let s1=`this is demo string`
let arr=s1.split(" ")
console.log(arr)
/******************************************/
s1="100,xyz,abc"
arr=s1.split(",")
console.log(arr)
arr.forEach((p)=>console.log(p))

6.substring():

let s1="Hello World"
let s2=s1.substring(1,7)
console.log(s2)
s2=s1.subscript


7.slice():


Difference between slice  and substring
slice(): 
1. slice method support negative indexing.
2.In substring start index is greater than stop index, then javascript automatically reverses it.
substring()
1.Sub  doesn't support negative indexing.
2.In slice start index cannot be greater than stop/in index

8.startsWith
let s1="Hello World"
console.log("s1.startsWith("H"))
console.log("s1.startsWith("Hel"))
console.log("s1.startsWith("ello"))

9.endsWith

console.log("s1.startsWith("d"))
console.log("s1.startsWith("ldd"))
console.log("s1.startsWith("worl"))

10.include
console.log("s1.startsWith("xyz"))
console.log("s1.startsWith("ello"))

11.replace
let s2="This is Demo string"
console.log(s2)
let s3=s2.replace("is", "IS")
console.log(s3) 

12.Array
Array is a group of elements 
In js we can group same type of element or different type of element
We can create array by two ways

declaration

Method - 1
let arr=[10,20,30]

Method - 2
let arr2 = new Array(10,20,30)






















set:
It is a collection of unique values. Duplicate values are not allowed.

Methods:

1.add(): adds value to the set
2.delete(): removes value from the set
3.has(): checks that specified value present in the set object or not
4.clear(): deletes all elements from the set
5.size: gets the size of set object. It is an attribute.




Take notes from shahane 
and paste it


copy the content send from karan nakhate's what's app and paste it here


now continue

What is class in js
Actually class is a function in JS.
1. When code executed js create a new function with class name
2. All the code of constructor goes inside function directly
3. All the functions present inside class goes inside prototype attribute

eg:
class test{
sayhello(){
con.lo(`hello ${this.firstname}`)
}
show(){
c.l(in show)
}
constructor(fname, lname){
this.firstname=fname
this.lastname=lname
c.l(c called)
}
}
c.l(typeof(test))
c.l(test.prototype.show)
c.l(test.prototype.sayhello)

in js we can store complete class inside a variable. This is called class as a expression
we use class as a expression to pass class as a parameter to the function

function display(myclass2){
let ob=new myclass2()
ob.sayHello()
}
let x=class{
constructor(){
c.l(constructor called)
}
sayHello(){
c.l(Hello world)
}
}
display(x)

encapsulation : Encapsulation means hide data from outside of the class. We can create encapsulation by three steps: 
1. Declare all variables as private (We use # symbol in js to declare private variable)
2. Write setter method to set value (We use set keyword to create setter)
3. Write getter method to get the value of the private variable (Use get keyword to get value of private variable)

eg :

class test{
#firstname;
constructor(fname){
this.#firstname=fname
}
set Name(fname){
this.#firstname=fname
}
get Name(){
return this.#firstname
}
}
let ob=new test("abc")
c.l(`Hello ${ob.Name}`)
ob.Name="xyz"
c.l(`Hello ${ob.Name}`)
//cannot access private variable outside of class
//c.l(`Hello ${ob.#firstname}`)


Types of variables in class

There are 2 types of variables present in the class
1.instance variable
2.static variable


1.instance variable : instance variable belongs to object means each object has it's own copy of the instance variable. When we create multiple obj of class separate memory is allocated for each object or the instance variable. 
We use 'this' keyword to access or modify instance variable.

eg:
class test{
#firstname
#lastname
constructor(fname, lname){
this.#firstname=fname
this.#lastname=lname
}
show(){
c.l(`first name${this.#firstname}`)
c.l(`first name${this.#lastname}`)
}
}
let ob1=new test("abc","xyz")
let ob2=new test("pqr","qqq")
ob1.show()
ob2.show()


	INSTANCE VARIABLE


	ob1
---------------------
| #firstname:"abc"  |
| #lastname:"xyz"   |
|		    |
|  		    |
|		    |
|		    |
--------------------


	ob2
---------------------
| #firstname:"pqr"  |
| #lastname:"qqq"   |
|		    |
|                   | 
| 		    |
|		    |    
--------------------


2.static variable

	we can declare static variable in js class. Static variables has following properties:
1) It is declared using 'static' keyword.
2) Only one copy of the static variable is present no matter how many objects of the class is created.
3) static variable is accessed by class name only (We cannot use 'this' keyword to access static keyword.)

static function :
Properties
1) It is declared using 'static' keyword 
2) It is called by class name only (static method cannot be called by object)
3) static method can access only static variable



eg:

class student{
    #id
    static i=0
    constructor(sid){
        this.#id=sid
        student.i++
    }
    show(){
        console.log(`ID: ${this.#id}`)
        console.log(`Count is : ${student.i}`)

    }
}
let s1=new student(10)
let s2=new student(20)
let s3=new student(30)
s1.show()
s2.show()
s3.show()



	static variable


	s1
---------------------
| #id=10	    |
|    		    |
|		    |
|  		    |
|		    |
|		    |
--------------------


	s2
---------------------
| #id=20	    |
| 		    |
|		    |
|                   | 
| 		    |
|		    |    
--------------------

	s3
---------------------
| #id=30	    |
| 		    |
|		    |
|  		    |
|		    |
|		    |
--------------------


	i
---------------------
| i=0		    |
| i=1		    |
| i=2		    |
| i=3               | 
| 		    |
|		    |    
--------------------


+] Inheritance



Inheritance is a principle by which properties of one class can be used into another class . The main purpose of the inheritance is code reusability. In js we use extends keyword to create the inheritance.
syntax:
class b extends a

eg:

class A{
    show(){
        console.log("Hello world")
    }
}
class B extends A{
    disp(){
        console.log("Hi")
    }
}
let ob = new B()
ob.show()
ob.disp()

NOte: In js multiple inheritance is not possible





*) Constructor chaining
	Always base class constructor executed first and then derived class constructor. In js we have to manually call base class constructor through derive class using super keyword. 

eg:

class A{
    constructor(){
        console.log("In A")
    }
}
class B extends A{
    constructor(){
        super()
        console.log("In b")
    }
}
class C extends B{
    constructor(){
        super()
        console.log("In C")
    }
}
let ob = new C()

O/P:

In A 
In B
In C



class A{
    constructor(){
	this.i=100
        console.log("In A")
    }
}
class B extends A{
    constructor(){
        super()
	this.j=200
        console.log("In b")
    }
	add(){
	console.log(this.i+this.j)
}
}
let ob = new B()
ob.add()

When parameterized construcors are used total number of variables required in base class that is A and total parameters required in class B are required to be passed

class A{
    constructor(x){
	this.i=x
        console.log("In A")
    }
}
class B extends A{
    constructor(a,b){
        super(b)
	this.j=a
        console.log("In b")
    }
	add(){
	console.log(this.i+this.j)
}
}
let ob = new B(201,101)
ob.add()

---------------------------------------------------------------------------------------------------------------------

*)Method overriding

When base class and derived class has same method name with same parameters then it is called method overriding.

eg:

//Method overridding
class A{
    sayHello(){
        console.log("In A")
    }
}
class B extends A{
    sayHello(){
        console.log("In B")
    }
	
}

let ob = new B()
ob.sayHello()
o/p:
In B

----------------------------------------------------------------------------------------------------------------------

In js Method overloading is not possible

----------------------------------------------------------------------------------------------------------------------
+] Mixing

	Mixing Multiple inheritance is not present in J.S. because it can inherit only one class. Mixing is a class containing methods that can be used by other classes without need of inheritance. This is simply copying one function from one class to another class. We can use object.assign method to assign the existing method to the class.


let mix1={
show(){
console.log("In MIX1")
}
}
let mix2={
disp(){
console.log("In MIX2")
}
}
class A{
constructor(){
console.log("Constructor of A class called!!")
}
sayHello(){
console.log("In A class")
}
}
console.log(typeof(A))
console.log(A.prototype.sayHello)
object.assign(A.prototype,mix1)
object.assign(A.prototype,mix2)
let ob=new A()
ob.sayHello()


----------------------------------------------------------------------------------------------------------------------

+] Computed Name
	We can use the strings for function name

eg: 

//Computed name
class A{
    ['say'+'Hello'](){
        console.log("Hello world")
    }
}
let ob=new A()
ob.sayHello()

----------------------------------------------------------------------------------------------------------------------

